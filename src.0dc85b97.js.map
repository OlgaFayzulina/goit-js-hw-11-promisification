{"version":3,"sources":["js/task-1.js","js/task-2.js","js/task-3.js","index.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","all","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","reject","id","logSuccess","logError","warn","amount","catch"],"mappings":";AAAA,IAAMA,EAAQ,SAAAC,GACH,OAAA,IAAIC,QAAQ,SAACC,GAChBC,WAAW,WACLD,EAAQF,IACTA,MAKLI,EAAS,SAAAC,GAAQC,OAAAA,QAAQC,IAAsBF,kBAAAA,OAAAA,EAAlC,QAEnBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ;;ACIjB,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,KAAA,GAAA,GAAA,OAAA,sBAAA,CAAA,IAAA,EAAA,OAAA,sBAAA,GAAA,IAAA,EAAA,EAAA,OAAA,SAAA,GAAA,OAAA,OAAA,yBAAA,EAAA,GAAA,cAAA,EAAA,KAAA,MAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,CAAA,IAAA,EAAA,MAAA,UAAA,GAAA,UAAA,GAAA,GAAA,EAAA,EAAA,EAAA,OAAA,IAAA,GAAA,QAAA,SAAA,GAAA,EAAA,EAAA,EAAA,EAAA,MAAA,OAAA,0BAAA,OAAA,iBAAA,EAAA,OAAA,0BAAA,IAAA,EAAA,OAAA,IAAA,QAAA,SAAA,GAAA,OAAA,eAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,MAAA,OAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EAhBF,IAAMK,EAAQ,CACV,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GACzBC,IAAAA,EAAeF,EAASG,IAAI,SAAAC,GAC9BA,OAAAA,EAAKP,OAASI,EAAgBG,EAAAA,EAAAA,GAAAA,GAA9B,GAAA,CAAoCN,QAASM,EAAKN,SAAWM,IAC1DhB,OAAAA,QAAQiB,IAAIH,IAGjBX,EAAS,SAAAW,GAAgBT,OAAAA,QAAQa,MAAMJ,IAE7CH,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ;;AChBrC,IAAMgB,EAA4B,SAACC,EAAKC,GAC7BC,OAAAA,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAGhDK,EAAkB,SAAAC,GACb,OAAA,IAAI1B,QAAQ,SAACC,EAAS0B,GACrB7B,IAAAA,EAAQqB,EAA0B,IAAK,KAC7CjB,WAAW,WACYoB,KAAKE,SAAW,GAG/BvB,EAAQyB,EAAYE,GAAI9B,GAExB6B,EAAOD,EAAYE,KAE1B9B,MAID+B,EAAa,SAACD,EAAIxB,GACtBC,QAAQC,IAAmBsB,eAAAA,OAAAA,EAAmBxB,kBAAAA,OAAAA,EAA9C,QAGI0B,EAAW,SAAAF,GACfvB,QAAQ0B,KAAqCH,gCAAAA,OAAAA,EAA7C,+BAGFH,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MACjCzB,KAAKsB,GACLI,MAAMH,GAEPL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MACjCzB,KAAKsB,GACLI,MAAMH,GAEPL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,KACjCzB,KAAKsB,GACLI,MAAMH,GAEPL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MACjCzB,KAAKsB,GACLI,MAAMH;;;;ACtCT,aAJA,QAAA,kBACA,QAAA,kBACA,QAAA,kBAEA,QAAA","file":"src.0dc85b97.js","sourceRoot":"../src","sourcesContent":["const delay = ms => {\n    return new Promise((resolve) => {\n        setTimeout(() => {\n              resolve(ms);\n          }, ms);\n        }\n    )\n};\n  \n  const logger = time => console.log(`Resolved after ${time}ms`);\n  \n  delay(2000).then(logger); // Resolved after 2000ms\n  delay(1000).then(logger); // Resolved after 1000ms\n  delay(1500).then(logger); // Resolved after 1500ms","\nconst users = [\n    { name: 'Mango', active: true },\n    { name: 'Poly', active: false },\n    { name: 'Ajax', active: true },\n    { name: 'Lux', active: false },\n  ];\n  \n  const toggleUserState = (allUsers, userName) => {\n      const updatedUsers = allUsers.map(user =>\n          user.name === userName ? { ...user, active: !user.active } : user);\n      return Promise.all(updatedUsers);\n  };\n  \n  const logger = updatedUsers => console.table(updatedUsers);\n  \n  toggleUserState(users, 'Mango').then(logger);\n  toggleUserState(users, 'Lux').then(logger);","\nconst randomIntegerFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  };\n  \n  const makeTransaction = transaction => {\n      return new Promise((resolve, reject) => {\n        const delay = randomIntegerFromInterval(200, 500);\n        setTimeout(() => {\n            const canProcess = Math.random() > 0.3;\n\n            if (canProcess) {\n                resolve(transaction.id, delay);\n              } else {\n                reject(transaction.id);\n              }\n      }, delay);\n    });\n  };\n  \n  const logSuccess = (id, time) => {\n    console.log(`Transaction ${id} processed in ${time}ms`);\n  };\n  \n  const logError = id => {\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\n  };\n\n  makeTransaction({ id: 70, amount: 150 })\n  .then(logSuccess)\n  .catch(logError);\n\n  makeTransaction({ id: 71, amount: 230 })\n  .then(logSuccess)\n  .catch(logError);\n\n  makeTransaction({ id: 72, amount: 75 })\n  .then(logSuccess)\n  .catch(logError);\n\n  makeTransaction({ id: 73, amount: 100 })\n  .then(logSuccess)\n  .catch(logError);","import './js/task-1.js';\nimport './js/task-2.js';\nimport './js/task-3.js';\n\nimport './style.css';\n"]}